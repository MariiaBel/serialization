export default function serialization() {
    let serializedString = ''
    let deserializedArr = []
    let sortedCharsFrequency = []
    
    const ASCIISize = 127 - 2
    const uniqChars = [126, 127]
    
    const doSortedCharsFrequency = (chars) => {
        const charsFrequency = new Map()
        chars.forEach((char) => {
            if(charsFrequency.has(char)) {
                charsFrequency.set(char, charsFrequency.get(char) + 1)
            } else {
                charsFrequency.set(char, 1)
            }
        })
        
        sortedCharsFrequency = Array.from(charsFrequency)
            .sort(([char1, value1], [char2, value2]) => value2 - value1)
            .map(([char, _]) => char)
    
    }

    const getCompression = () => {
        const incomeCharsBit = deserializedArr.join(',').length * 8
        const outcomeCharsBit = serializedStr.length * 7
        
        return Math.floor(outcomeCharsBit * 100 / incomeCharsBit)
    }

    return {
        compression: 0,
        serialize(chars) {
            if(!Array.isArray(chars) || chars.length === 0) return []

            let prefix = ''

            doSortedCharsFrequency(chars)
            
            
            serializedString = chars.reduce((accumulator, char) => { 
                
                let charIndex = sortedCharsFrequency.indexOf(char)
                if(charIndex === -1) throw Error('A wrong char ' + char)

                const devInteger = Math.floor(charIndex / ASCIISize)
                if(devInteger > 0) {
                    prefix = String.fromCharCode(uniqChars[devInteger -1])
                } else {
                    prefix = ''
                }
                
                return accumulator + prefix + String.fromCharCode(charIndex % ASCIISize)
            }, '')
            
            return serializedString
        },
        deserialize() {
            let serializeStringToDeserialize = serializedString
            let prefix = 0
            do {
                let char = serializeStringToDeserialize.charCodeAt(0)
                serializeStringToDeserialize = serializeStringToDeserialize.slice(1)

                if(char >= 0 && char <= ASCIISize) {
                    deserializedArr.push(sortedCharsFrequency[char + prefix])
                    prefix = 0
                } else {
                    prefix = ASCIISize * (uniqChars.indexOf(char) + 1) 
                }
            } while(serializeStringToDeserialize.length > 0)

            this.compression = getCompression()
            return deserializedArr
        }
    }
}

const incomeNumbers = [35,299,221,292,294,150,126,112,243,262,23,1,66,123,49,147,214,158,86,222,274,286,133,154,234,5,127,294,70,158,9,291,40,198,1,9,245,244,58,175,12,34,130,252,36,123,38,122,68,253,277,15,228,40,107,244,76,251,5,295,273,207,298,66,273,298,39,226,112,80,188,139,217,96,264,77,202,163,194,156,273,14,93,248,208,271,86,245,153,157,252,81,191,142,284,253,263,245,121,65,51,190,193,184,140,268,182,122,174,1,56,67,280,185,243,28,95,184,47,77,34,106,5,198,173,84,294,6,204,4,168,191,158,232,91,90,63,235,14,271,171,239,270,197,90,177,139,213,258,22,171,98,198,208,84,22,298,169,57,45,262,215,177,2,193,142,25,255,216,280,21,32,290,65,255,169,36,112,285,17,230,286,296,151,289,140,36,88,37,220,112,107,198,228,55,274,226,215,119,34,67,79,238,109,233,49,2,243,211,212,7,199,103,22,82,189,119,146,113,53,7,79,72,113,159,77,102,242,108,25,207,238,60,56,258,134,97,202,148,32,133,139,266,245,226,14,165,42,11,189,74,27,218,201,281,254,209,39,231,132,8,72,136,294,103,115,172,63,173,174,219,89,9,52,19,31,247,156,157,121,263,84,14,192,67,109,143,287,60,148,108,40,285,210,256,253,99,105,89,171,61,247,266,249,81,294,186,133,237,133,154,292,221,266,50,189,290,56,230,196,235,4,88,283,50,66,151,178,46,209,32,261,138,205,18,152,19,2,180,211,232,150,38,190,4,248,13,188,300,118,209,229,126,106,90,187,64,239,165,253,39,179,133,101,130,54,296,20,99,83,246,143,86,189,267,253,267,197,132,286,23,122,197,287,15,218,61,292,191,176,121,174,171,82,222,270,284,213,115,139,9,220,198,132,24,277,259,79,276,96,186,18,256,82,112,253,274,22,271,31,242,268,174,177,81,52,78,102,43,20,180,174,206,83,140,289,197,279,98,260,46,202,189,102,227,22,64,22,261,268,156,85,208,229,103,253,178,110,246,94,273,275,111,67,165,167,167,147,134,200,143,299,51,18,4,33,32,207,223,287,237,84,291,247,120,258,125,58,178,50,107,74,199,231,212,228,200,115,296,42,282,20,277,202,166,123,4,150,240,106,7,276,112,249,220,66,30,235,64,248,274,189,208,165,249,145,33,273,72,119,155,92,293,134,98,111,263,126,198,121,237,222,233,64,204,122,85,183,270,115,151,163,40,122,13,201,192,218,65,65,277,122,92,124,218,150,213,94,3,21,183,221,177,239,243,262,109,189,281,167,299,183,59,285,141,156,295,235,286,78,272,224,233,245,235,105,178,176,26,181,26,91,97,73,75,220,203,50,223,25,228,127,231,188,140,182,237,291,54,229,229,5,176,134,273,273,10,262,142,137,282,40,283,251,256,81,64,121,129,181,49,132,20,126,75,26,195,26,141,137,177,178,194,283,291,285,64,40,232,64,8,40,269,277,6,81,233,265,134,24,173,19,135,297,222,2,89,169,206,234,84,17,194,62,176,109,109,100,227,235,236,67,242,281,268,237,254,257,149,148,44,136,196,184,157,66,1,111,183,45,139,190,31,53,110,38,13,245,107,114,70,9,207,138,163,87,53,258,223,176,167,197,164,35,24,32,96,60,289,185,93,188,261,1,24,138,269,130,37,53,241,35,80,45,21,275,133,226,287,283,4,295,84,135,93,32,234,47,212,132,30,247,62,119,120,221,43,156,74,18,189,73,28,158,147,6,265,125,154,108,107,94,149,33,67,129,135,106,10,273,114,153,128,128,199,272,216,249,113,19,100,194,299,31,258,241,132,78,184,9,98,37,232,270,102,91,56,156,65,235,300,45,300,151,225,119,199,180,174,173,169,280,54,170,260,185,271,158,139,174,101,122,1,48,257,43,106,131,220,103,264,252,209,296,71,271,169,284,139,273,23,129,142,115,288,213,86,51,295,158,157,102,230,70,102,112,60,97,274,19,45,282,216,21,192,44,29,214,210,241,227,127,98,152,249,122,242,148,88,13,236,202,229,123,13,219,37,186,91,18,20,223,132,143,290,219,299,223,294,262,160,97,53,88,284,257,99,226,256,54,230,247,12,160,244,46,205,143,110,59,178,103,176,94,106,125,161,30,242,285,121,126,124,139,157,268,191,224,288,212,269,224,252,254,104,236,76,83,284,52,156,195,16,181,100,180,215,14,228,237,62,209,68,28,168,152,277,136,244,163]

const serializationObj = serialization()
const serializedStr = serializationObj.serialize(incomeNumbers)
const deserializedArr = serializationObj.deserialize()
const compression = serializationObj.compression

console.log(serializedStr)
console.log(deserializedArr)
console.log(deserializedArr.toString === incomeNumbers.toString)
console.log(incomeNumbers.length)
console.log(deserializedArr.length)
console.log(compression)
